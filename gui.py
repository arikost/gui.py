# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
import os
import csv
def helpFunction(self, path_list, old_word, new_word):
    # if it is not a csv or json file
    path_string = path_list[0]
    if len(path_list) == 1 and not (path_string.endswith('.json') or path_string.endswith('.csv') or os.path.isdir(path_string)):
        self.terminal.addItem('No csv or json files in gives directory')
        # raise Exception('check directory')
    # if it is a single csv or json file
    elif len(path_list) == 1 and os.path.isfile(path_string):
        getInToTheFile(self, path_string, old_word, new_word)
    # If it is several files, or folders or both
    elif len(path_list) > 1 or os.path.isdir(path_string):
        for path in path_list:
            if os.path.isfile(path) and not (path.endswith('.json') or path.endswith('.csv')):
                self.terminal.addItem('No csv or json files in gives directory')
                # raise Exception('check directory')
            elif path.endswith('.json') or path.endswith('.csv'):
                getInToTheFile(self, path, old_word, new_word)
            else:
                getInToTheFolder(self, path, old_word, new_word)


# This function reading the file, finding and replacing the words
def getInToTheFile(self, file_path, old_word, new_word):
    # read input file
    self.terminal.addItem("new file : " + str(file_path))
    fin = open(file_path, 'r')
    # read file contents to string
    data = fin.read()
    self.terminal.addItem("data: \n" + str(data))
    # replace all occurrences of the required string
    data = data.replace(old_word, new_word)
    self.terminal.addItem("After replacing: \n" + str(data))
    # close the input file
    fin.close()
    # open the input file in write mode
    fin = open(file_path, 'w')
    # overrite the input file with the resulting data
    fin.write(data)
    # close the file
    fin.close()


# This function find all the files in a folder
def getInToTheFolder(self, path_folder, old_word, new_word):
    for path in os.listdir(path_folder):
        full_path = os.path.join(path_folder, path)
        if full_path.endswith('.json') or full_path.endswith('.csv'):
            getInToTheFile(self, full_path, old_word, new_word)
        elif os.path.isfile(full_path) and not (full_path.endswith('.json') or full_path.endswith('.csv')):
            pass
        else:
            getInToTheFolder(self, full_path, old_word, new_word)



def checkValidPath(self, path):
    if not os.path.isfile(path) and not os.path.isdir(path):
        self.terminal.addItem('This paths does not exist: ')
        self.terminal.addItem(path)
    elif os.path.isfile(path):
            self.terminal.addItem("path exist: ")
            self.terminal.addItem(path)
    else:
        for file_path in os.listdir(path):
            full_path = os.path.join(path, file_path)
            checkValidPath(self, full_path)


# This function prints all the json and csv files we have selected
def addAllTheValidPath(self, path_list):
    for path in path_list:
        if os.path.isfile(path):
            if path.endswith('.json') or path.endswith('.csv'):
                self.file_list_widget.addItem(path)
                self.csv_and_json_files.append(path)
        else:
            for file_path in os.listdir(path):
                full_path = os.path.join(path, file_path)
                addAllTheValidPath(self, [full_path])


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(607, 790)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.file_list_widget = QtWidgets.QListWidget(self.centralwidget)
        self.file_list_widget.setGeometry(QtCore.QRect(40, 60, 531, 181))
        self.file_list_widget.setObjectName("file_list_widget")
        self.old_word_lbl = QtWidgets.QLabel(self.centralwidget)
        self.old_word_lbl.setGeometry(QtCore.QRect(10, 280, 201, 31))
        self.old_word_lbl.setObjectName("old_word_lbl")
        self.new_word_ldl = QtWidgets.QLabel(self.centralwidget)
        self.new_word_ldl.setGeometry(QtCore.QRect(10, 340, 191, 31))
        self.new_word_ldl.setObjectName("new_word_ldl")
        self.old_word_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.old_word_Qtext.setGeometry(QtCore.QRect(210, 280, 361, 31))
        self.old_word_Qtext.setObjectName("old_word_Qtext")
        self.new_word_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.new_word_Qtext.setGeometry(QtCore.QRect(210, 340, 361, 31))
        self.new_word_Qtext.setObjectName("new_word_Qtext")
        self.run_btn = QtWidgets.QPushButton(self.centralwidget)
        self.run_btn.setGeometry(QtCore.QRect(210, 390, 361, 31))
        self.run_btn.setObjectName("run_btn")
        self.terminal = QtWidgets.QListWidget(self.centralwidget)
        self.terminal.setGeometry(QtCore.QRect(20, 460, 561, 271))
        self.terminal.setObjectName("terminal")
        self.clear_btn = QtWidgets.QPushButton(self.centralwidget)
        self.clear_btn.setGeometry(QtCore.QRect(30, 390, 141, 31))
        self.clear_btn.setObjectName("clear_btn")
        self.check_if_file_exist_btn = QtWidgets.QPushButton(self.centralwidget)
        self.check_if_file_exist_btn.setGeometry(QtCore.QRect(410, 20, 161, 31))
        self.check_if_file_exist_btn.setObjectName("check_if_file_exist_btn")
        self.select_files_btn = QtWidgets.QPushButton(self.centralwidget)
        self.select_files_btn.setGeometry(QtCore.QRect(210, 20, 141, 31))
        self.select_files_btn.setObjectName("select_files_btn")
        self.select_btn_dir = QtWidgets.QPushButton(self.centralwidget)
        self.select_btn_dir.setGeometry(QtCore.QRect(40, 20, 151, 31))
        self.select_btn_dir.setObjectName("select_btn_dir")


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 607, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.csv_and_json_files = []

        self.select_btn_dir.clicked.connect(self.select_dir_func)
        self.select_files_btn.clicked.connect(self.select_file_func)
        self.run_btn.clicked.connect(self.run_chenges)
        self.clear_btn.clicked.connect(self.clear)
        self.check_if_file_exist_btn.clicked.connect(self.check_if_file_exist_func)

    def select_file_func(self):
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        dialog.setOption(QtWidgets.QFileDialog.DontUseNativeDialog, True)
        file_view = dialog.findChild(QtWidgets.QListView, 'listView')

        # to make it possible to select multiple directories:
        if file_view:
            file_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        f_tree_view = dialog.findChild(QtWidgets.QTreeView)
        if f_tree_view:
            f_tree_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        if dialog.exec():
            addAllTheValidPath(self, dialog.selectedFiles())


    def select_dir_func(self):
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.DirectoryOnly)
        dialog.setOption(QtWidgets.QFileDialog.DontUseNativeDialog, True)
        file_view = dialog.findChild(QtWidgets.QListView, 'listView')

        # to make it possible to select multiple directories:
        if file_view:
            file_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        f_tree_view = dialog.findChild(QtWidgets.QTreeView)
        if f_tree_view:
            f_tree_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        if dialog.exec():
            selected_dir = dialog.selectedFiles()
        addAllTheValidPath(self, selected_dir)


    def run_chenges(self):
        self.terminal.clear()
        old_word = self.old_word_Qtext.toPlainText()
        new_word = self.new_word_Qtext.toPlainText()
        if new_word == "" or old_word == "":
            pass
        else:
            helpFunction(self,self.csv_and_json_files, old_word, new_word)

    def clear(self):
        self.csv_and_json_files.clear()
        self.file_list_widget.clear()
        self.terminal.clear()

    def check_if_file_exist_func(self):

        if len(self.csv_and_json_files) == 0:
            return
        else:
            for file in self.csv_and_json_files:
                print(file)
                f = open(file, "r")
                print(f)
                if file[-4:] == ".csv":

                    reader = csv.reader(f)
                    for row in reader:
                        if row[4].count("/") > 0 and row[4][1] == ":":
                            checkValidPath(self, row[4])
                if file[-5:] == ".json":
                    json_content = json.load(f)
                    for obj in json_content["testsToRun"]:
                        checkValidPath(self, obj["url"])
                f.close()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.select_btn_dir.setText(_translate("MainWindow", "select directory"))
        self.old_word_lbl.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; color:#ff0000;\">old word (word to replace)</span></p><p align=\"center\"><span style=\" font-size:12pt; color:#ff0000;\"><br/></span></p></body></html>"))
        self.new_word_ldl.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; color:#005500;\">new word (word to insert)</span></p></body></html>"))
        self.run_btn.setText(_translate("MainWindow", "run"))
        self.clear_btn.setText(_translate("MainWindow", "clear"))
        self.check_if_file_exist_btn.setText(_translate("MainWindow", "check if files exist"))
        self.select_files_btn.setText(_translate("MainWindow", "select files"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
