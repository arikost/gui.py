# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import os
def helpFunction(self, path_list, old_word, new_word):
    # if it is not a csv or json file
    path_string = path_list[0]
    if len(path_list) == 1 and not (path_string.endswith('.json') or path_string.endswith('.csv') or os.path.isdir(path_string)):
        self.terminal.addItem('No csv or json files in gives directory')
        # raise Exception('check directory')
    # if it is a single csv or json file
    elif len(path_list) == 1 and os.path.isfile(path_string):
        getInToTheFile(self, path_string, old_word, new_word)
    # If it is several files, or folders or both
    elif len(path_list) > 1 or os.path.isdir(path_string):
        for path in path_list:
            if os.path.isfile(path) and not (path.endswith('.json') or path.endswith('.csv')):
                self.terminal.addItem('No csv or json files in gives directory')
                # raise Exception('check directory')
            elif path.endswith('.json') or path.endswith('.csv'):
                getInToTheFile(self, path, old_word, new_word)
            else:
                getInToTheFolder(self, path, old_word, new_word)


# This function reading the file, finding and replacing the words
def getInToTheFile(self, file_path, old_word, new_word):
    # read input file
    self.terminal.addItem("new file : " + str(file_path))
    fin = open(file_path, 'r')
    # read file contents to string
    data = fin.read()
    # replace all occurrences of the required string
    data = data.replace(old_word, new_word)
    # close the input file
    fin.close()
    # open the input file in write mode
    fin = open(file_path, 'w')
    # overrite the input file with the resulting data
    fin.write(data)
    # close the file
    fin.close()
    self.terminal.addItem('changes completed')


# This function find all the files in a folder
def getInToTheFolder(self, path_folder, old_word, new_word):
    for path in os.listdir(path_folder):
        full_path = os.path.join(path_folder, path)
        if full_path.endswith('.json') or full_path.endswith('.csv'):
            getInToTheFile(self, full_path, old_word, new_word)
        elif os.path.isfile(full_path) and not (full_path.endswith('.json') or full_path.endswith('.csv')):
            pass
        else:
            getInToTheFolder(self, full_path, old_word, new_word)



def checkValidPath(self, path):
    if not os.path.isfile(path) and not os.path.isdir(path):
        self.terminal.addItem('This paths does not exist: ')
        self.terminal.addItem(path)
    elif os.path.isfile(path):
            self.terminal.addItem("path exist: ")
            self.terminal.addItem(path)
    else:
        for file_path in os.listdir(path):
            full_path = os.path.join(path, file_path)
            checkValidPath(self, full_path)


# This function prints all the json and csv files we have selected
def addAllTheValidPath(self, path_list, filetype):
    for path in path_list:
        if os.path.isfile(path):
            if path.endswith(filetype) :
                self.file_list_widget.addItem(path)
                self.csv_and_json_files.append(path)
        else:
            for file_path in os.listdir(path):
                full_path = os.path.join(path, file_path)
                addAllTheValidPath(self, [full_path])


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(607, 790)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.file_list_widget = QtWidgets.QListWidget(self.centralwidget)
        self.file_list_widget.setGeometry(QtCore.QRect(40, 60, 531, 181))
        self.file_list_widget.setObjectName("file_list_widget")
        self.select_dir_btn = QtWidgets.QPushButton(self.centralwidget)
        self.select_dir_btn.setGeometry(QtCore.QRect(40, 20, 101, 31))
        self.select_dir_btn.setObjectName("select_dir_btn")
        self.old_word_lbl = QtWidgets.QLabel(self.centralwidget)
        self.old_word_lbl.setGeometry(QtCore.QRect(10, 300, 201, 31))
        self.old_word_lbl.setObjectName("old_word_lbl")
        self.new_word_ldl = QtWidgets.QLabel(self.centralwidget)
        self.new_word_ldl.setGeometry(QtCore.QRect(10, 340, 191, 31))
        self.new_word_ldl.setObjectName("new_word_ldl")
        self.old_word_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.old_word_Qtext.setGeometry(QtCore.QRect(210, 300, 361, 31))
        self.old_word_Qtext.setObjectName("old_word_Qtext")
        self.new_word_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.new_word_Qtext.setGeometry(QtCore.QRect(210, 340, 361, 31))
        self.new_word_Qtext.setObjectName("new_word_Qtext")
        self.run_btn = QtWidgets.QPushButton(self.centralwidget)
        self.run_btn.setGeometry(QtCore.QRect(210, 390, 361, 31))
        self.run_btn.setObjectName("run_btn")
        self.terminal = QtWidgets.QListWidget(self.centralwidget)
        self.terminal.setGeometry(QtCore.QRect(20, 460, 561, 271))
        self.terminal.setObjectName("terminal")
        self.clear_btn = QtWidgets.QPushButton(self.centralwidget)
        self.clear_btn.setGeometry(QtCore.QRect(30, 390, 141, 31))
        self.clear_btn.setObjectName("clear_btn")
        self.check_if_file_exist_btn = QtWidgets.QPushButton(self.centralwidget)
        self.check_if_file_exist_btn.setGeometry(QtCore.QRect(40, 250, 161, 31))
        self.check_if_file_exist_btn.setObjectName("check_if_file_exist_btn")
        self.select_files_btn = QtWidgets.QPushButton(self.centralwidget)
        self.select_files_btn.setGeometry(QtCore.QRect(150, 20, 81, 31))
        self.select_files_btn.setObjectName("select_files_btn")
        self.file_type_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.file_type_Qtext.setGeometry(QtCore.QRect(440, 20, 131, 31))
        self.file_type_Qtext.setObjectName("file_type_Qtext")
        self.file_type_lbl = QtWidgets.QLabel(self.centralwidget)
        self.file_type_lbl.setGeometry(QtCore.QRect(320, 20, 111, 31))
        self.file_type_lbl.setObjectName("file_type_lbl")
        self.prfix_Qtext = QtWidgets.QTextEdit(self.centralwidget)
        self.prfix_Qtext.setGeometry(QtCore.QRect(220, 250, 351, 31))
        self.prfix_Qtext.setObjectName("prfix_Qtext")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 607, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.file_type = str()
        self.csv_and_json_files = []

        self.select_dir_btn.clicked.connect(self.select_dir_func)
        self.select_files_btn.clicked.connect(self.select_file_func)
        self.run_btn.clicked.connect(self.run_chenges)
        self.clear_btn.clicked.connect(self.clear)
        self.check_if_file_exist_btn.clicked.connect(self.check_if_file_exist_func)

    def select_file_func(self):
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        dialog.setOption(QtWidgets.QFileDialog.DontUseNativeDialog, True)
        file_view = dialog.findChild(QtWidgets.QListView, 'listView')
        self.file_type = self.file_type_Qtext.toPlainText()
        # to make it possible to select multiple directories:
        if file_view:
            file_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        f_tree_view = dialog.findChild(QtWidgets.QTreeView)
        if f_tree_view:
            f_tree_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        if dialog.exec():
            addAllTheValidPath(self, dialog.selectedFiles(), self.file_type)


    def select_dir_func(self):
        global selected_dir
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.DirectoryOnly)
        dialog.setOption(QtWidgets.QFileDialog.DontUseNativeDialog, True)
        file_view = dialog.findChild(QtWidgets.QListView, 'listView')
        self.file_type = self.file_type_Qtext.toPlainText()

        # to make it possible to select multiple directories:
        if file_view:
            file_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        f_tree_view = dialog.findChild(QtWidgets.QTreeView)
        if f_tree_view:
            f_tree_view.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        if dialog.exec():
            selected_dir = dialog.selectedFiles()
        addAllTheValidPath(self, selected_dir, self.file_type)


    def run_chenges(self):
        self.terminal.clear()
        old_word = self.old_word_Qtext.toPlainText()
        new_word = self.new_word_Qtext.toPlainText()
        if new_word == "" or old_word == "":
            pass
        else:
            helpFunction(self,self.csv_and_json_files, old_word, new_word)

    def clear(self):
        self.csv_and_json_files.clear()
        self.file_list_widget.clear()
        self.terminal.clear()

    def check_if_file_exist_func(self):
        pass
        if len(self.csv_and_json_files) == 0:
            return
        else:
            prefix = self.prfix_Qtext.toPlainText()
            n = len(prefix)
            for file in self.csv_and_json_files:
                f = open(file, "r")
                for line in f.readlines():
                    path = ""
                    prefix_found = False
                    for i in range(len(line)-n):
                        if line[i:i+n] == prefix:
                            prefix_found = True
                        if prefix_found:
                            if line[i] == ',' or line[i] == '\"':
                                checkValidPath(self, path)
                                path = ""
                                prefix_found = False
                            else:
                                path += line[i]

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.select_dir_btn.setText(_translate("MainWindow", "select directory"))
        self.old_word_lbl.setText(_translate("MainWindow",
                                             "<html><head/><body><p><span style=\" font-size:12pt; color:#ff0000;\">old word (word to replace)</span></p><p align=\"center\"><span style=\" font-size:12pt; color:#ff0000;\"><br/></span></p></body></html>"))
        self.new_word_ldl.setText(_translate("MainWindow",
                                             "<html><head/><body><p><span style=\" font-size:12pt; color:#005500;\">new word (word to insert)</span></p></body></html>"))
        self.run_btn.setText(_translate("MainWindow", "run"))
        self.clear_btn.setText(_translate("MainWindow", "clear"))
        self.check_if_file_exist_btn.setText(_translate("MainWindow", "check if files exist in prefix"))
        self.select_files_btn.setText(_translate("MainWindow", "select files"))
        self.file_type_lbl.setText(_translate("MainWindow",
                                              "<html><head/><body><p><span style=\" font-size:12pt;\">chose file type:</span></p></body></html>"))
        self.prfix_Qtext.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        "p, li { white-space: pre-wrap; }\n"
        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
        "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">C:/</p>\n"
        "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
